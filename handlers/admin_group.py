import logging
from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import Admin, bot

spam_words = ['—Å–ø–∞–º', '–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å', "—Å–∫–∏–¥–∫–∏", '–¥—É—Ä–∞–∫', '–¥–µ–±–∏–ª']

user_warnings = {}


async def welcome_user(message: types.Message):
    for member in message.new_chat_members:
        await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}!\n\n'
                             f'–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ãüëá\n'
                             f'* –ù–µ —Å–ø–∞–º–∏—Ç—å\n'
                             f'* –ù–µ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è\n'
                             f'* –ù–µ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å\n')


async def warn_user(message: types.Message):
    if message.chat.type != 'private':
        if message.from_user.id not in Admin:
            await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω!')
        elif not message.reply_to_message:
            await message.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        else:
            user_id = message.reply_to_message.from_user.id
            user_name = message.reply_to_message.from_user.full_name
            user_warnings[user_id] = user_warnings.get(user_id, 0) + 1

            for admin in Admin:
                await bot.send_message(chat_id=admin,
                                       text=f'{user_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({user_warnings[user_id]}/3)')

                if user_warnings[user_id] >= 3:
                    await bot.kick_chat_member(message.chat.id, user_id)
                    await bot.send_message(chat_id=message.chat.id,
                                           text=f'{user_name} –±—ã–ª —É–¥–∞–ª–µ–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!')


async def delete_user_handler(message: types.Message):
    if message.chat.type != 'private':
        if message.from_user.id not in Admin:
            await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω!')
        elif not message.reply_to_message:
            await message.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        else:
            user_id = message.reply_to_message.from_user.id
            user_name = message.reply_to_message.from_user.full_name

            await message.answer(f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {user_name}?',
                                 reply_markup=InlineKeyboardMarkup().add(
                                     InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_user {user_id}')))

    else:
        await message.answer('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ')


async def complete_delete_user(call: types.CallbackQuery):
    user_id = int(call.data.replace("delete_user ", ""))
    try:
        await bot.kick_chat_member(call.message.chat.id, user_id)
        await call.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω', show_alert=True)
        await bot.delete_message(call.message.chat.id, call.message.message_id)

    except Exception as e:
        logging.error(f'Error in complete_delete_user: {e}')
        await call.answer(text='–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=True)


async def filter_spam(message: types.Message):
    for word in spam_words:
        if word in message.text:
            await message.delete()
            await message.answer('–ù–µ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è –∏ –Ω–µ —Å–ø–∞–º–∏—Ç—å!')
            break


def register_admin_group(dp: Dispatcher):
    dp.register_message_handler(welcome_user, content_types=[types.ContentType.NEW_CHAT_MEMBERS])
    dp.register_message_handler(warn_user, commands=['warn'], commands_prefix='!/')
    dp.register_message_handler(delete_user_handler, commands=['d'], commands_prefix='!/')
    dp.register_callback_query_handler(complete_delete_user,
                                       lambda call: call.data and call.data.startswith('delete_user '))

    dp.register_message_handler(filter_spam)
